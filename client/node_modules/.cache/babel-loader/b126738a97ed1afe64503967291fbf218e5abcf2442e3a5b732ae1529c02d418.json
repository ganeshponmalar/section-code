{"ast":null,"code":"import toast from 'react-hot-toast';\nimport { authenticate } from './helper';\n\n/** validate login page username */\nexport async function usernameValidate(values) {\n  const errors = usernameVerify({}, values);\n  if (values.username) {\n    //check user exist or not\n    const {\n      status\n    } = await authenticate(values.username);\n  }\n  return errors;\n}\n/**  validate password */\n\nexport async function passwordValidate(values) {\n  const errors = passwordVerify({}, values);\n  return errors;\n}\n\n/** validate password */\nfunction passwordVerify() {\n  let errors = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let values = arguments.length > 1 ? arguments[1] : undefined;\n  /* eslint-disable no-useless-escape */\n  const specialChars = /[`!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?~]/;\n  if (!values.password) {\n    errors.password = toast.error(\"Password Required...!\");\n  } else if (values.password.includes(\" \")) {\n    errors.password = toast.error(\"Wrong Password...!\");\n  } else if (values.password.length < 4) {\n    errors.password = toast.error(\"Password must be more than 4 characters long\");\n  } else if (!specialChars.test(values.password)) {\n    errors.password = toast.error(\"Password must have special character\");\n  }\n  return errors;\n}\n\n/** validate reset for password */\nexport async function resetPasswordValidation(values) {\n  const errors = passwordVerify({}, values);\n  if (values.password !== values.confirm_pwd) {\n    errors.exit = toast.error(\"password not match\");\n  }\n  return errors;\n}\n\n/**  validate for resetPassword */\n\n/** validate username */\n\nfunction usernameVerify() {\n  let error = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let values = arguments.length > 1 ? arguments[1] : undefined;\n  if (!values.username) {\n    error.username = toast.error('Username Required...!');\n  } else if (values.username.includes(\" \")) {\n    error.username = toast.error('Invalid Username..!');\n  }\n  return error;\n}\n\n/**  validation for register form */\n\nexport default function registerValidation(values) {\n  const errors = usernameVerify({}, values);\n  console.log(errors, 'show error');\n  passwordVerify(errors, values);\n  emailVerify(errors, values);\n  return errors;\n}\n\n/** validate email */\n\nfunction emailVerify() {\n  let error = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let values = arguments.length > 1 ? arguments[1] : undefined;\n  if (!values.email) {\n    error.email = toast.error(\"Email Required...!\");\n  } else if (values.email.includes(\" \")) {\n    error.email = toast.error(\"Wrong Email...!\");\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    error.email = toast.error(\"Invalid email address...!\");\n  }\n  return error;\n}\n\n/**  validate for the profile page */\n\nexport async function profileValidation(values) {\n  const errors = emailVerify([], values);\n  console.log(errors);\n  return errors;\n}","map":{"version":3,"names":["toast","authenticate","usernameValidate","values","errors","usernameVerify","username","status","passwordValidate","passwordVerify","arguments","length","undefined","specialChars","password","error","includes","test","resetPasswordValidation","confirm_pwd","exit","registerValidation","console","log","emailVerify","email","profileValidation"],"sources":["/home/ganesan/Desktop/appletree-app/client/src/Components/helper/validate.js"],"sourcesContent":["import toast from 'react-hot-toast'\nimport { authenticate } from './helper';\n\n\n\n/** validate login page username */\nexport async function usernameValidate(values){\n\n    const errors = usernameVerify({},values);\n\n\n    if(values.username){\n        //check user exist or not\n        const {status} = await authenticate(values.username)\n\n    }\n\n    return errors;\n\n}\n/**  validate password */\n\nexport async function passwordValidate(values){\n\n    const errors = passwordVerify({},values);\n\n    return errors;\n}\n\n\n/** validate password */\nfunction passwordVerify(errors = {}, values){\n    /* eslint-disable no-useless-escape */\n    const specialChars = /[`!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?~]/;\n\n    if(!values.password){\n        errors.password = toast.error(\"Password Required...!\");\n\n    } else if(values.password.includes(\" \")){\n        errors.password = toast.error(\"Wrong Password...!\");\n\n    }else if(values.password.length < 4){\n        errors.password = toast.error(\"Password must be more than 4 characters long\");\n\n    }else if(!specialChars.test(values.password)){\n        errors.password = toast.error(\"Password must have special character\");\n    }\n\n    return errors;\n}\n\n/** validate reset for password */\nexport async function resetPasswordValidation(values){\n\n    const errors = passwordVerify({},values);\n\n    if(values.password!== values.confirm_pwd){\n        errors.exit = toast.error(\"password not match\")\n    }\n\n    return errors;\n}\n\n\n\n/**  validate for resetPassword */\n\n\n\n\n/** validate username */\n\nfunction usernameVerify(error = [], values){\n\n    if(!values.username){\n\n        error.username = toast.error('Username Required...!');\n\n    }else if(values.username.includes(\" \")){\n\n        error.username = toast.error('Invalid Username..!')\n    }\n\n    return error\n}\n\n\n\n\n\n/**  validation for register form */\n\nexport default function registerValidation(values){\n\n    const errors = usernameVerify({},values);\n    console.log(errors,'show error')\n\n    passwordVerify(errors,values); \n    \n    emailVerify(errors,values);\n\n    return errors;\n}\n\n\n\n\n\n\n/** validate email */\n\nfunction emailVerify(error ={}, values){\n\n    if(!values.email){\n\n        error.email = toast.error(\"Email Required...!\");\n\n    }else if(values.email.includes(\" \")){\n\n        error.email = toast.error(\"Wrong Email...!\")\n\n    }else if(!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)){\n\n        error.email = toast.error(\"Invalid email address...!\")\n        \n    }\n\n    return error;\n}\n\n\n\n/**  validate for the profile page */\n\nexport async function profileValidation(values){\n\n    const errors = emailVerify([],values);\n    \n    console.log(errors);\n    \n    return errors;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}