{"ast":null,"code":"import axios from \"axios\";\nimport { isPromise } from \"formik\";\naxios.defaults.baseURL = process.env.REACT_APP_SERVER_DOMIN;\n\n/**   Let's  Make API request  */\n\n/**   authenticate function  */\nexport async function authenticate(username) {\n  try {\n    return await axios.post('/api/authenticate', {\n      username\n    });\n  } catch (error) {\n    return {\n      error: \"Username does't exist...\"\n    };\n  }\n}\n\n/**  user Details */\nexport async function getUser(_ref) {\n  let {\n    username\n  } = _ref;\n  try {\n    const {\n      data\n    } = await axios.get(`/api/user/${username}`);\n    return {\n      data\n    };\n  } catch (error) {\n    return {\n      error: \"Password dosent match...!\"\n    };\n  }\n}\n\n/**  register user function */\n\nexport async function registerUser(credentials) {\n  try {\n    const {\n      data: {\n        msg\n      },\n      status\n    } = await axios.post(`/api/register`, credentials);\n    let {\n      username,\n      email\n    } = credentials;\n\n    /** send email */\n    if (status === 201) {\n      await axios.post('/api/registerMail', {\n        username,\n        userEmail: email,\n        text: msg\n      });\n    }\n    return Promise.resolve(msg);\n  } catch (error) {\n    return isPromise.reject({\n      error\n    });\n  }\n}\n\n/**   Login function */\nexport async function verifyPassword(_ref2) {\n  let {\n    username,\n    password\n  } = _ref2;\n  try {\n    if (username) {\n      const {\n        data\n      } = await axios.post('/api/login', {\n        username,\n        password\n      });\n      console.log(data);\n      return Promise.resolve({\n        data\n      });\n    }\n  } catch (error) {\n    return Promise.reject({\n      error: \"Password does't match...!\"\n    });\n  }\n}\n\n/**  update user function */\n\nexport async function updateUser(response) {\n  try {\n    const token = await localStorage.getItem('token');\n    const data = await axios.put('/api/updateuser', response, {\n      headers: {\n        'Autherization': `Bearer ${token}`\n      }\n    });\n    console.log(data);\n    return Promise.resolve({\n      data\n    });\n  } catch (error) {\n    return Promise.reject({\n      error: \"Could't update Profile..!\"\n    });\n  }\n}\n\n/** generate OTP */\nexport async function generateOTP(username) {\n  console.log('generateOTP');\n  try {\n    const {\n      data: {\n        code\n      },\n      status\n    } = await axios.get('/api/generateOTP', {\n      params: {\n        username\n      }\n    });\n    console.log(code);\n\n    //sending the mail with OTP\n\n    if (status === 201) {\n      let {\n        data: {\n          email\n        }\n      } = await getUser({\n        username\n      });\n      let text = `Your Password Recovery OTP is ${code}. Verify and recovery your Password`;\n      await axios.post('/api/registerMail', {\n        username,\n        userEmail: email,\n        text,\n        subject: \"Password Recovery OTP\"\n      });\n    }\n    return Promise.resolve(code);\n  } catch (error) {\n    return Promise.reject({\n      error\n    });\n  }\n}\n\n/**   verify OTP */\n\nexport async function verifyOTP(_ref3) {\n  let {\n    username,\n    code\n  } = _ref3;\n  try {\n    const {\n      data,\n      status\n    } = await axios.get('/api/verifyOTP', {\n      params: {\n        username,\n        code\n      }\n    });\n    return {\n      data,\n      status\n    };\n  } catch (error) {\n    return Promise.reject(error);\n  }\n}\n\n/**   reset Password */\nexport async function resetPassword(_ref4) {\n  let {\n    username,\n    password\n  } = _ref4;\n  try {\n    const {\n      data,\n      status\n    } = await axios.put('/api/resetPassword', {\n      username,\n      password\n    });\n    return Promise.resolve({\n      data,\n      status\n    });\n  } catch (error) {\n    return Promise.reject({\n      error\n    });\n  }\n}","map":{"version":3,"names":["axios","isPromise","defaults","baseURL","process","env","REACT_APP_SERVER_DOMIN","authenticate","username","post","error","getUser","_ref","data","get","registerUser","credentials","msg","status","email","userEmail","text","Promise","resolve","reject","verifyPassword","_ref2","password","console","log","updateUser","response","token","localStorage","getItem","put","headers","generateOTP","code","params","subject","verifyOTP","_ref3","resetPassword","_ref4"],"sources":["/home/ganesan/Desktop/appletree-app/client/src/Components/helper/helper.js"],"sourcesContent":["import axios from \"axios\"\nimport { isPromise } from \"formik\";\n\naxios.defaults.baseURL = process.env.REACT_APP_SERVER_DOMIN\n\n\n\n/**   Let's  Make API request  */\n\n\n/**   authenticate function  */\nexport async function authenticate(username) {\n\n    try {\n        return await axios.post('/api/authenticate', { username })\n\n    } catch (error) {\n\n        return { error: \"Username does't exist...\" }\n\n    }\n}\n\n/**  user Details */\nexport async function getUser({ username }) {\n\n\n    try {\n        const { data } = await axios.get(`/api/user/${username}`)\n\n        return { data };\n\n    } catch (error) {\n\n        return { error: \"Password dosent match...!\" }\n    }\n}\n\n\n/**  register user function */\n\nexport async function registerUser(credentials) {\n\n    try {\n\n        const { data: { msg }, status } = await axios.post(`/api/register`, credentials);\n\n\n        let { username, email } = credentials;\n\n\n        /** send email */\n        if (status === 201) {\n\n            await axios.post('/api/registerMail', { username, userEmail: email, text: msg })\n\n        }\n\n        return Promise.resolve(msg)\n\n    } catch (error) {\n\n        return isPromise.reject({ error });\n\n    }\n\n}\n\n\n/**   Login function */\nexport async function verifyPassword({ username, password }) {\n\n    try {\n\n        if (username) {\n\n            const { data } = await axios.post('/api/login', { username, password })\n\n            console.log(data)\n\n            return Promise.resolve({ data })\n\n        }\n\n    } catch (error) {\n        return Promise.reject({ error: \"Password does't match...!\" })\n\n    }\n\n}\n\n\n/**  update user function */\n\nexport async function updateUser(response) {\n\n    try {\n\n        const token = await localStorage.getItem('token');\n\n        const data = await axios.put('/api/updateuser', response, { headers: { 'Autherization': `Bearer ${token}` } });\n        console.log(data)\n\n        return Promise.resolve({ data })\n\n    } catch (error) {\n\n        return Promise.reject({ error: \"Could't update Profile..!\" })\n\n    }\n}\n\n\n\n   /** generate OTP */\n   export async function generateOTP(username) {\n\n    console.log('generateOTP')\n    try {\n\n        const { data: { code }, status } = await axios.get('/api/generateOTP', { params: { username } });\n        \n        console.log(code)\n\n        //sending the mail with OTP\n\n        if (status === 201) {\n\n            let { data: { email } } = await getUser({ username });\n\n            let text = `Your Password Recovery OTP is ${code}. Verify and recovery your Password`;\n\n            await axios.post('/api/registerMail', { username, userEmail: email, text, subject: \"Password Recovery OTP\" })\n\n        }\n\n        return Promise.resolve(code);\n\n    } catch (error) {\n\n        return Promise.reject({ error });\n\n    }\n\n}\n\n/**   verify OTP */\n\nexport async function verifyOTP({ username, code }) {\n\n    try {\n        const { data, status } = await axios.get('/api/verifyOTP', { params: { username, code } })\n\n        return { data, status }\n\n    } catch (error) {\n\n        return Promise.reject(error);\n\n    }\n\n}\n\n/**   reset Password */\nexport async function resetPassword({ username, password }) {\n\n    try {\n\n        const { data, status } = await axios.put('/api/resetPassword', { username, password })\n        return Promise.resolve({ data, status })\n\n    } catch (error) {\n\n        return Promise.reject({ error })\n    }\n}\n\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}