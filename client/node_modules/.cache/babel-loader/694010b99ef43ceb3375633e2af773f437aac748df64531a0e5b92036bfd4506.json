{"ast":null,"code":"import axios from \"axios\";\nimport { isPromise } from \"formik\";\naxios.defaults.baseURL = process.env.REACT_APP_SERVER_DOMIN;\n\n/**   Let's  Make API request  */\n\n/**   authenticate function  */\nexport async function authenticate(username) {\n  try {\n    return await axios.post('/api/authenticate', {\n      username\n    });\n  } catch (error) {\n    return {\n      error: \"Username does't exist...\"\n    };\n  }\n}\n\n/**  user Details */\nexport async function getUser(_ref) {\n  let {\n    username\n  } = _ref;\n  try {\n    const {\n      data\n    } = await axios.get(`/api/user/${username}`);\n    return {\n      data\n    };\n  } catch (error) {\n    return {\n      error: \"Password dosent match...!\"\n    };\n  }\n}\n\n/**  register user function */\n\nexport async function registerUser(credentials) {\n  try {\n    const {\n      data: {\n        msg\n      },\n      status\n    } = await axios.post(`/api/register`, credentials);\n    let {\n      username,\n      email\n    } = credentials;\n\n    /** send email */\n    if (status === 201) {\n      await axios.post('/api/registerMail', {\n        username,\n        userEmail: email,\n        text: msg\n      });\n    }\n    return Promise.resolve(msg);\n  } catch (error) {\n    return isPromise.reject({\n      error\n    });\n  }\n}\n\n/**   Login function */\nexport async function verifyPassword(_ref2) {\n  let {\n    username,\n    password\n  } = _ref2;\n  try {\n    if (username) {\n      const {\n        data\n      } = await axios.post('/api/login', {\n        username,\n        password\n      });\n      console.log(data);\n      return Promise.resolve({\n        data\n      });\n    }\n  } catch (error) {\n    return Promise.reject({\n      error: \"Password does't match...!\"\n    });\n  }\n}\n\n/**  update user function */\n\nexport async function updateUser(response) {\n  try {\n    const token = await localStorage.getItem('token');\n    const data = await axios.put('/api/updateuser', response, {\n      headers: {\n        'Autherization': `Bearer ${token}`\n      }\n    });\n    console.log(data);\n    return Promise.resolve({\n      data\n    });\n  } catch (error) {\n    return Promise.reject({\n      error: \"Could't update Profile..!\"\n    });\n  }\n}\n\n/** generate OTP */\nexport async function generateOTP(username) {\n  console.log();\n  try {\n    const {\n      data: {\n        code\n      },\n      status\n    } = await axios.get('/api/generateOTP', {\n      params: {\n        username\n      }\n    });\n\n    //sending the mail with OTP\n\n    if (status === 201) {\n      let {\n        data: {\n          email\n        }\n      } = await getUser({\n        username\n      });\n      let text = `Your Password Recovery OTP is ${code}. Verify and recovery your Password`;\n      await axios.post('/api/registerMail', {\n        username,\n        userEmail: email,\n        text,\n        subject: \"Password Recovery OTP\"\n      });\n    }\n    return Promise.resolve(code);\n  } catch (error) {\n    return Promise.reject({\n      error\n    });\n  }\n}\n\n/**   verify OTP */\n\nexport async function verifyOTP(_ref3) {\n  let {\n    username,\n    code\n  } = _ref3;\n  try {\n    const {\n      data,\n      status\n    } = await axios.get('/api/verifyOTP', {\n      params: {\n        username,\n        code\n      }\n    });\n    return {\n      data,\n      status\n    };\n  } catch (error) {\n    return Promise.reject(error);\n  }\n}\n\n/**   reset Password */\nexport async function resetPassword(_ref4) {\n  let {\n    username,\n    password\n  } = _ref4;\n  try {\n    const {\n      data,\n      status\n    } = await axios.put('/api/resetPassword', {\n      username,\n      password\n    });\n    return Promise.resolve({\n      data,\n      status\n    });\n  } catch (error) {\n    return Promise.reject({\n      error\n    });\n  }\n}","map":{"version":3,"names":["axios","isPromise","defaults","baseURL","process","env","REACT_APP_SERVER_DOMIN","authenticate","username","post","error","getUser","_ref","data","get","registerUser","credentials","msg","status","email","userEmail","text","Promise","resolve","reject","verifyPassword","_ref2","password","console","log","updateUser","response","token","localStorage","getItem","put","headers","generateOTP","code","params","subject","verifyOTP","_ref3","resetPassword","_ref4"],"sources":["/home/ganesan/Desktop/appletree-app/client/src/Components/helper/helper.js"],"sourcesContent":["import axios from \"axios\"\nimport { isPromise } from \"formik\";\n\naxios.defaults.baseURL = process.env.REACT_APP_SERVER_DOMIN\n\n\n\n/**   Let's  Make API request  */\n\n\n/**   authenticate function  */\nexport async function authenticate(username){\n\n    try{\n        return await axios.post('/api/authenticate',{username})\n\n    }catch(error){\n\n        return {error:\"Username does't exist...\"}\n\n    }\n}\n\n/**  user Details */\nexport async function getUser({username}){\n\n\n    try{\n     const {data} =  await axios.get(`/api/user/${username}`)\n\n        return{data};\n\n    }catch(error){\n        \n        return {error:\"Password dosent match...!\"}\n    }\n}\n\n\n/**  register user function */\n\nexport async function registerUser(credentials){\n\n    try{\n\n       const {data :{msg}, status} =  await axios.post(`/api/register`,credentials);\n\n\n       let {username,email} = credentials;\n\n\n       /** send email */\n       if(status === 201){\n\n        await axios.post('/api/registerMail',{username,userEmail: email,text:msg})\n\n       }\n\n       return Promise.resolve(msg)\n\n    }catch(error){\n\n        return isPromise.reject({error});\n\n    }\n\n}\n\n\n/**   Login function */\nexport async function verifyPassword({username,password}){\n   \n    try{\n\n      if(username){\n\n        const {data} =    await axios.post('/api/login',{username,password})\n\n          console.log(data)\n\n        return Promise.resolve({data})\n\n      }\n\n    }catch(error){\n        return Promise.reject({error: \"Password does't match...!\"})\n\n    }\n\n}\n\n\n/**  update user function */\n\nexport async function updateUser(response){\n\n    try{\n\n        const token = await localStorage.getItem('token');\n\n        const data = await axios.put('/api/updateuser',response,{headers: {'Autherization': `Bearer ${token}`}});\n        console.log(data)\n\n        return Promise.resolve({data})\n\n    }catch(error){\n                                                              \n        return Promise.reject({error:\"Could't update Profile..!\"})\n\n    }\n}\n\n/** generate OTP */\nexport async function generateOTP(username){\n                console.log()\n    try{\n\n   const {data:{code},status}  =  await axios.get('/api/generateOTP',{params:{username}});\n\n   //sending the mail with OTP\n\n   if(status === 201){\n\n     let {data:{email}} = await getUser({username});\n\n     let text = `Your Password Recovery OTP is ${code}. Verify and recovery your Password`;\n\n     await axios.post('/api/registerMail',{username,userEmail: email,text,subject:\"Password Recovery OTP\"})\n\n   }\n\n   return Promise.resolve(code);\n\n    }catch(error){\n\n        return Promise.reject({error});\n\n    }\n\n}\n\n/**   verify OTP */\n\nexport async function verifyOTP({username,code}){\n\n    try{\n   const {data,status} =  await axios.get('/api/verifyOTP',{params:{username, code}})\n   return {data,status}\n\n    }catch(error){\n        return Promise.reject(error);\n    }\n\n}\n\n/**   reset Password */\nexport async function resetPassword({username,password}){\n\n    try{\n\n        const{data,status} = await axios.put('/api/resetPassword',{username,password})\n        return Promise.resolve({data,status})\n\n    }catch(error){\n\n        return Promise.reject({error})\n    }\n}\n\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}